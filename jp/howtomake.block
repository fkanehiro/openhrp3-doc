title = CMakeコマンドによるOpenHRP3のコンパイル
base  = ..


<h2><a name="1" class="wiki-page"></a>CMakeによるコンパイル</h2>

	<p>バージョン3.1ではコンパイルに&#8221;CMake&#8221;というツールを使います。</p>


	<p>まずは cmake をインストールしてください。Ubuntuでは、</p>


<pre>
$ sudo apt-get install cmake
</pre>
	<p>で入ります。</p>


	<p>cmakeでは、各ディレクトリに置かれた &#8220;CMakeLists.txt&#8221; という設定ファイルに基づいて、MakefileやVisual C++ のプロジェクトファイルなどを生成します。生成は、以下のようにします。（ただし、Visual C++ についてはまだCmakeLists.txt の記述が十分ではありません。）</p>


	<p>ソースのトップで、</p>


<pre>
 $ ccmake .
</pre>
	<p>とすると cmake の設定画面が表示されます。</p>


	<p>最初は設定開始前の状態ですので、ここで &#8220;c&#8221;を押して、設定を進めます。<br />
すると、必要なライブラリなどを自動的にみつけてそれらの使用のための設定をしてくれます。</p>


	<p>ただし、ライブラリ等を標準的でないディレクトリやパスの通ってないディレクトリとかに置いていて、それらをみつけられない場合もあります。この場合、CMake Error: とでて、エラーの原因が表示されます。例えば tvmet がみつからなかったときは、</p>


<pre>
$  CMake Error: Could not find tvmet. Please set TVMET_DIR correctly
</pre>
	<p>などとでます。</p>


	<p>この場合は、まず画面下部の指示に従って、&#8221;e&#8221; キーを押します。<br />
すると、キーと値のリストを編集していく画面になります。</p>


	<p>ここで、例えば TVMET_DIR の項目に &#8220;TVMET_DIR-NOTFOUNT&#8221; などとでていたりしますので、これを適切に設定します。項目にカーソルを持っていって、リターンキーを押した後、パスなどを入力すればOKです。このとき、TABキーによるファイルパス補間も可能です。</p>


	<p>設定ができたら、また &#8220;c&#8221; キーを押します。すると設定がやり直されて、値が正しく設定されていれば、エラーはなくなるはずです。以上を、エラーが起きなくなるまで進めます。</p>


	<p>ただし、エラーがでていなくても、意図するパスとは違うパスでライブラリ等が設定されている場合もあるので、例えば自分でホームに入れたライブラリを使いたかったりする場合は、対応する項目をそれに合わせて設定するようにします。</p>


	<p>最後に、&#8221;g&#8221; キーを押すと、設定にもとづいてMakefileが自動的に生成されます。</p>


	<p>以上の操作は、バッチ的に行うこともできます。その場合は、&#8221;ccmake&#8221; ではなく、&#8221;cmake&#8221; コマンドを使うようにしてください。例えば、もしライブラリの探索でエラーがでないのであれば、</p>


<pre>
$ cmake .
</pre>
	<p>だけで Makefile が生成されることになります。</p>


	<p>このようにして生成したMakefile で、普通にmake できます。依存関係も完璧に記述されていますので、ソースのどこか一部を修正する度に &#8220;make clean&#8221; をしなくても大丈夫なはずですし、 &#8220;make -j n&#8221; とかやると、 n プロセスによる並列コンパイルも問題なく行うことができるはずです。</p>


	<p>また、cmakeが生成したMakefileによるmakeでは、個々のコンパイルのコマンドラインを全て見せるのではなく、処理中のファイルと進捗率を重視したすっきりとした表示がなされます。ただし、個々のコンパイルのコマンドラインも確認したいという場合には、</p>


<pre>
$ make VERBOSE=1
</pre>
	<p>とすればOKです。</p>


	<p>常にこうしたい場合は、cmake の設定で &#8220;CMAKE_VERBOSE_MAKEFILE&#8221; を &#8220;ON&#8221; にしておけばOKです。</p>


	<p>cmake の詳細については、<a href="http://www.cmake.org/" target="_blank">http://www.cmake.org/</a> や、ここからたどれる　<a href="http://www.cmake.org/Wiki/CMake" target="_blank">http://www.cmake.org/Wiki/CMake</a> , <a href="http://www.cmake.org/HTML/CMake-2.4.html" target="_blank">http://www.cmake.org/HTML/CMake-2.4.html</a> なんかをみるようにしてください。</p>


	<p>今後は、例えば新たにソースファイルを追加したりする場合は、Makefile ではなく、CMakeLists.txt を編集することになります。</p>


	<h3><a name="2" class="wiki-page"></a>ビルドディレクトリをソースディレクトリ以外にする場合</h3>

	<p>ソースディレクトリとビルドディレクトリを分けて作業をする方法と注意点を記します。</p>


	<p>ソースディレクトリを (Working Dir)/OpenHRP3.1 、ビルド用ディレクトリを (Working Dir)/test とします。</p>


<pre>
$ cd test/
$ ccmake ../OpenHRP3.1
$ make
</pre>
	<p>とすることでcmakeの設定画面を起動します。設定を終えgキーを押下し ビルド用のファイルとディレクトリを生成します。<br />
test 以下にMakefile,CMakeCache.txt,作業ディレクトリなどが生成されますので、test ディレクトリターゲットにして make コマンドを実行してください。
</p>


	<p>ただし OpenHRP3.1 以下にCMakeCache.txtが作成済みの場合、OpenHRP3.1 以下のMakefile等を再構築することになりますので<br />
あらかじめ OpenHRP3.1 以下のCMakeCache.txtはリネームもしくは削除してください。</p>

